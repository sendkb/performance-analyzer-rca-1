name: Java CI

on: 
  push: 
    branches: 
      - fargate-ci
  pull_request:
    branches: 
      - main
      - dev
      - fargate-ci

jobs:
  build_rca_pkg:
    runs-on: [ubuntu-latest]
    name: Building RCA package
    steps:
    - name: Set up JDK 1.12
      uses: actions/setup-java@v1
      with:
        java-version: 1.12
    - name: Checkout RCA package
      uses: actions/checkout@v2
      with:
        path: ./tmp/performance-analyzer-rca
      # fetch the main branch to make it available for spotless ratcheting
    - name: Fetch RCA 'main' branch
      working-directory:  ./tmp/performance-analyzer-rca
      run: git fetch --depth=1 origin main
    - name: Checkout Performance Analyzer package
      uses: actions/checkout@v2
      with:
        repository: opendistro-for-elasticsearch/performance-analyzer
        ref: fargate-ci
        path: ./tmp/performance-analyzer
    - name: Build RCA with Gradle
      working-directory:  ./tmp/performance-analyzer-rca
      run: ./gradlew build --stacktrace
    - name: Upload reports
      uses: actions/upload-artifact@v2
      with:
        name: gradle-reports
        path: ./tmp/performance-analyzer-rca/build/reports
    - name: Generate Jacoco coverage report
      working-directory: ./tmp/performance-analyzer-rca
      run: ./gradlew jacocoTestReport
    - name: Upload coverage report
      working-directory: ./tmp/performance-analyzer-rca
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: bash <(curl -s https://codecov.io/bash) -f ./build/reports/jacoco/test/jacocoTestReport.xml
    - name: Publish RCA jar to maven local
      working-directory: ./tmp/performance-analyzer-rca
      run: ./gradlew publishToMavenLocal
    - name: Build PA gradle using the new RCA jar
      working-directory: ./tmp/performance-analyzer
      run: rm licenses/performanceanalyzer-rca-1.13.jar.sha1
    - name: Update SHA
      working-directory: ./tmp/performance-analyzer
      run: ./gradlew updateShas
    - name: Build PA and run Unit Tests
      working-directory: ./tmp/performance-analyzer
      run: ./gradlew build -i
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.RCA_TESTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.RCA_TESTS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Log in to ECR
      uses: aws-actions/amazon-ecr-login@v1
      id: login-ecr
    - name: Copy build artifacts
      working-directory: ./tmp/performance-analyzer-rca
      run: ./gradlew copyDockerArtifacts
    - name: Push Elasticsearch docker image to ECR
      working-directory: ./tmp/performance-analyzer-rca/build/elasticsearch-docker
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: rca-tests-es-pa-rca
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Testrunner docker image to ECR
      working-directory: ./tmp/performance-analyzer-rca/build/testrunner-docker
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: rca-tests-testrunner
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  rca_integration_tests:
    runs-on: [ubuntu-latest]
    name: Running RCA integration tests
    needs: build_rca_pkg
    steps:
      - name: Checkout RCA package
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RCA_TESTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RCA_TESTS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - name: Debug image name
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rca-tests-testrunner
          IMAGE_TAG: ${{ github.sha }}
        run: echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Render task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rca-tests-testrunner
          IMAGE_TAG: ${{ github.sha }}
        with:
          task-definition: ./configs/aws/task-definition.rca-it.json
          container-name: testrunner
          image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Debug task definition file
        run: cat ${{ steps.render-task-definition.outputs.task-definition }}
      - name: Deploy to ECS
        id: deploy-to-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          cluster: rca-tests-cluster
      - name: Wait for tests
        env:
          AWS_REGION: us-west-2
        run: |
          # Check the task status
          CURRENT_STATUS=$(aws ecs describe-tasks --cluster rca-tests-cluster --tasks ${{ steps.deploy-to-ecs.task-definition-arn }} --region $AWS_REGION | jq '.tasks[0].lastStatus');
          echo "Current status is: $CURRENT_STATUS"
          while [ "$CURRENT_STATUS" != "STOPPED" ];
            do sleep 1m;
            CURRENT_STATUS=$(aws ecs describe-tasks --cluster rca-tests-cluster --tasks ${{ steps.deploy-to-ecs.task-definition-arn }} --region $AWS_REGION | jq '.tasks[0].lastStatus');
          done;

          EXIT_CODE = $(aws ecs describe-tasks --cluster rca-tests-cluster --tasks ${{ steps.deploy-to-ecs.task-definition-arn }} --region $AWS_REGION | jq '.tasks[0].containers[0].exitCode')
          if [ $EXIT_CODE = null ];
            echo Missing exit code;
            exit 1;
          fi
          exit $EXIT_CODE

    # - name: Spin up Docker cluster for integ testing
    #   working-directory: ./tmp/performance-analyzer-rca
    #   run: ./gradlew enableRca
    # - name: Run integration tests
    #   working-directory: ./tmp/pa
    #   run: ./gradlew integTest --info --stacktrace -Dtests.enableIT=true
    # - name: Build Docker image
    #   working-directory: ./tmp/performance-analyzer-rca
    #   run: ./gradlew buildDocker
